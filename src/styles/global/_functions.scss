@function tf-map-get($map, $keys...) {
  @if length($keys) == 1 {
    $keys: nth($keys, 1);
  }

  $warn: "#{nth($keys, 1)}";
  $length: length($keys);
  $get: map-get($map, nth($keys, 1));

  @if $length > 1 {
    @for $i from 2 through $length {
      @if $get != null and type-of($get) == 'map' {
        $warn: $warn + "->#{nth($keys, $i)}";
        $get: map-get($get, nth($keys, $i));

        @if $get == null {
          @return null;
        }
      }
      @else {
        @return tf-get-warning($warn, $get, nth($keys, $i));
      }
    }
  }

  @return $get;
}

@function tf-get-warning($warn, $get, $key) {
  @if $get == null {
    @warn "Map has no value for key search `#{$warn}`";
  }
  @else if type-of($get) != 'map' {
    @warn "Non-map value found for key search `#{$warn}`, cannot search for key `#{$key}`";
  }
  @return null;
}

@function tf-map-has($map, $keys...) {
  @if length($keys) == 1 {
    $keys: nth($keys, 1);
  }

  $warn: "#{nth($keys, 1)}";
  $length: length($keys);
  $get: tf-map-get($map, nth($keys, 1));

  @if $length > 1 {
    @for $i from 2 through $length {
      @if $get != null and type-of($get) == 'map' {
        $warn: $warn + "->#{nth($keys, $i)}";
        $get: tf-map-get($get, nth($keys, $i));

        @if $get == null {
          @return false;
        }
      }
      @else {
        @return false;
      }
    }
  }

  @if $get != null {
    @return true;
  }
  @else {
    @return false;
  }
}

@function tf-media-breakpoint($type) {
  @if (tf-map-has($tf-media-breakpointss, $type)) {
    @return tf-map-get($tf-media-breakpointss, $type);
  } @else {
    @return $type;
  }
}


@function tf-str-replace($string, $search, $replace: "") {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + tf-str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }

  @return $string;
}
